<?xml version="1.0"?>
<doc>
    <assembly>
        <name>One.Control</name>
    </assembly>
    <members>
        <member name="T:One.Control.Behaviors.DataGridBehavior">
            <summary> 使用方法 左尖括号 DataGrid ItemsSource="{Binding ...}" behaviors:DataGridBehavior.DisplayRowNumber="True" 右尖括号 </summary>
        </member>
        <member name="T:One.Control.Command.EventToCommandBehaviorMin">
            <summary> EventToCommand of MVVMLight 最小化 </summary>
        </member>
        <member name="M:One.Control.Command.EventToCommandBehaviorMin.AttachHandler(System.String)">
            <summary> Attaches the handler to the event </summary>
        </member>
        <member name="M:One.Control.Command.EventToCommandBehaviorMin.ExecuteCommand(System.Object,System.EventArgs)">
            <summary> Executes the Command </summary>
        </member>
        <member name="P:One.Control.Controls.Buttons.AssistButton.MinEdgeDist">
            <summary> 最小边距 </summary>
        </member>
        <member name="P:One.Control.Controls.Buttons.AssistButton.MinMagneticSuctionDist">
            <summary> 最小磁吸距离 </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Core.Extensions.VisualTreeAncestory(System.Windows.DependencyObject)">
            <summary>
            Yields the visual ancestory (including the starting point).
            </summary>
            <param name="dependencyObject"></param>
            <returns></returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Core.Extensions.LogicalTreeAncestory(System.Windows.DependencyObject)">
            <summary>
            Yields the logical ancestory (including the starting point).
            </summary>
            <param name="dependencyObject"></param>
            <returns></returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Core.Extensions.GetActualLeft(System.Windows.Window)">
            <summary>
            Returns the actual Left of the Window independently from the LayoutWindowState
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Core.Extensions.GetActualTop(System.Windows.Window)">
            <summary>
            Returns the actual Top of the Window independently from the LayoutWindowState
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="T:One.Control.Controls.Dragablz.Core.HitTest">
            <summary>
            Non-client hit test values, HT*
            </summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.DefaultInterLayoutClient">
            <summary>
            Provides a simple implementation of <see cref="T:One.Control.Controls.Dragablz.IInterLayoutClient" />, but only really useful if
            <see cref="T:System.Windows.Controls.TabItem" /> instances are specified in XAML.  If you are binding via ItemsSource then
            you most likely want to create your own implementation of <see cref="T:One.Control.Controls.Dragablz.IInterLayoutClient" />.
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Dockablz.Branch.GetFirstProportion">
            <summary>
            Gets the proportional size of the first item, between 0 and 1, where 1 would represent the entire size of the branch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Dockablz.BranchAccessor.Visit(One.Control.Controls.Dragablz.Dockablz.BranchItem,System.Action{One.Control.Controls.Dragablz.Dockablz.BranchAccessor},System.Action{One.Control.Controls.Dragablz.TabablzControl},System.Action{System.Object})">
            <summary>
            Visits the content of the first or second side of a branch, according to its content type.  No more than one of the provided <see cref="T:System.Action" />
            callbacks will be called.
            </summary>
            <param name="childItem"></param>
            <param name="childBranchVisitor"></param>
            <param name="childTabablzControlVisitor"></param>
            <param name="childContentVisitor"></param>
            <returns></returns>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Dockablz.BranchResult.Branch">
            <summary>
            The new branch.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Dockablz.BranchResult.TabablzControl">
            <summary>
            The new tab control.
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Dockablz.Extensions.Query(One.Control.Controls.Dragablz.Dockablz.Layout)">
            <summary>
            Begin a query of layout content, returning an accessor for examining the children.
            </summary>
            <param name="layout"></param>
            <returns></returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Dockablz.Extensions.Visit``1(One.Control.Controls.Dragablz.Dockablz.LayoutAccessor,``0,System.Action{``0,One.Control.Controls.Dragablz.Dockablz.BranchAccessor},System.Action{``0,One.Control.Controls.Dragablz.TabablzControl},System.Action{``0,System.Object})">
            <summary>
            Helper method for <see cref="M:One.Control.Controls.Dragablz.Dockablz.LayoutAccessor.Visit(System.Action{One.Control.Controls.Dragablz.Dockablz.BranchAccessor},System.Action{One.Control.Controls.Dragablz.TabablzControl},System.Action{System.Object})" /> which allows a context to be passed through.
            </summary>
            <typeparam name="TContext"></typeparam>
            <param name="layoutAccessor"></param>
            <param name="context"></param>
            <param name="branchVisitor"></param>
            <param name="tabablzControlVisitor"></param>
            <param name="contentVisitor"></param>
            <returns></returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Dockablz.Extensions.Visit``1(One.Control.Controls.Dragablz.Dockablz.BranchAccessor,``0,One.Control.Controls.Dragablz.Dockablz.BranchItem,System.Action{``0,One.Control.Controls.Dragablz.Dockablz.BranchAccessor},System.Action{``0,One.Control.Controls.Dragablz.TabablzControl},System.Action{``0,System.Object})">
            <summary>
            Helper method for <see cref="M:One.Control.Controls.Dragablz.Dockablz.BranchAccessor.Visit(One.Control.Controls.Dragablz.Dockablz.BranchItem,System.Action{One.Control.Controls.Dragablz.Dockablz.BranchAccessor},System.Action{One.Control.Controls.Dragablz.TabablzControl},System.Action{System.Object})" /> which allows a context to be passed through.
            </summary>
            <typeparam name="TContext"></typeparam>
            <param name="branchAccessor"></param>
            <param name="context"></param>
            <param name="childItem"></param>
            <param name="branchVisitor"></param>
            <param name="tabablzControlVisitor"></param>
            <param name="contentVisitor"></param>
            <returns></returns>
        </member>
        <member name="T:One.Control.Controls.Dragablz.Dockablz.FloatingItemSnapShot">
            <summary>
            experimentational.  might have to puish this back to mvvm only
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Dockablz.Layout.GetLoadedInstances">
            <summary>
            Helper method to get all the currently loaded layouts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Dockablz.Layout.Find(One.Control.Controls.Dragablz.TabablzControl)">
            <summary>
            Finds the location of a tab control withing a layout.
            </summary>
            <param name="tabablzControl"></param>
            <returns></returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Dockablz.Layout.Branch(One.Control.Controls.Dragablz.TabablzControl,System.Windows.Controls.Orientation,System.Boolean)">
            <summary>
            Creates a split in a layout, at the location of a specified <see cref="T:One.Control.Controls.Dragablz.TabablzControl" />.
            </summary>
            <para></para>
            <param name="tabablzControl">Tab control to be split.</param>
            <param name="orientation">Direction of split.</param>
            <param name="makeSecond">Set to <c>true</c> to make the current tab control push into the right hand or bottom of the split.</param>
            <remarks>The tab control to be split must be hosted in a layout control.</remarks>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Dockablz.Layout.Branch(One.Control.Controls.Dragablz.TabablzControl,System.Windows.Controls.Orientation,System.Boolean,System.Double)">
            <summary>
            Creates a split in a layout, at the location of a specified <see cref="T:One.Control.Controls.Dragablz.TabablzControl" />.
            </summary>
            <para></para>
            <param name="tabablzControl">Tab control to be split.</param>
            <param name="orientation">Direction of split.</param>
            <param name="makeSecond">Set to <c>true</c> to make the current tab control push into the right hand or bottom of the split.</param>
            <param name="firstItemProportion">Sets the proportion of the first tab control, with 0.5 being 50% of available space.</param>
            <remarks>The tab control to be split must be hosted in a layout control.  <see cref="P:One.Control.Controls.Dragablz.Dockablz.Layout.BranchTemplate" /> should be set (typically via XAML).</remarks>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Dockablz.Layout.Branch(One.Control.Controls.Dragablz.TabablzControl,One.Control.Controls.Dragablz.TabablzControl,System.Windows.Controls.Orientation,System.Boolean,System.Double)">
            <summary>
            Creates a split in a layout, at the location of a specified <see cref="T:One.Control.Controls.Dragablz.TabablzControl" />.
            </summary>
            <para></para>
            <param name="tabablzControl">Tab control to be split.</param>
            <param name="newSiblingTabablzControl">New sibling tab control (otherwise <see cref="P:One.Control.Controls.Dragablz.Dockablz.Layout.BranchTemplate" /> will be used).</param>
            <param name="orientation">Direction of split.</param>
            <param name="makeCurrentSecond">Set to <c>true</c> to make the current tab control push into the right hand or bottom of the split.</param>
            <param name="firstItemProportion">Sets the proportion of the first tab control, with 0.5 being 50% of available space.</param>
            <remarks>The tab control to be split must be hosted in a layout control. </remarks>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Dockablz.Layout.Partition">
            <summary>
            Use in conjuction with the <see cref="P:One.Control.Controls.Dragablz.InterTabController.Partition" /> on a <see cref="T:One.Control.Controls.Dragablz.TabablzControl" />
            to isolate drag and drop spaces/control instances.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.Dockablz.Layout.FloatingItemsContainerMarginProperty">
            <summary>
            Defines a margin for the container which hosts all floating items.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Dockablz.Layout.FloatingItemsContainerMargin">
            <summary>
            Defines a margin for the container which hosts all floating items.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Dockablz.Layout.FloatingItems">
            <summary>
            Floating items, such as tool/MDI windows, which will sit above the <see cref="!:Content" />.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Dockablz.Layout.FloatingItemsSource">
            <summary>
            Floating items, such as tool/MDI windows, which will sit above the <see cref="!:Content" />.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Dockablz.Layout.FloatingItemsControlStyle">
            <summary>
            The style to be applied to the <see cref="T:One.Control.Controls.Dragablz.DragablzItemsControl" /> which is used to display floating items.
            In most scenarios it should be OK to leave this to that applied by the default style.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.Dockablz.Layout.IsTopLeftItemProperty">
            <summary>
            Indicates if an item/tab control within a layout is contained at the top most and left most branch item.
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Dockablz.Layout.SetIsTopLeftItem(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Indicates if an item/tab control within a layout is contained at the top most and left most branch item.
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Dockablz.Layout.GetIsTopLeftItem(System.Windows.DependencyObject)">
            <summary>
            Indicates if an item/tab control within a layout is contained at the top most and left most branch item.
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Dockablz.Layout.OnApplyTemplate">
            <summary>When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.Dockablz.LayoutAccessor">
            <summary>
            Provides information about the <see cref="P:One.Control.Controls.Dragablz.Dockablz.LayoutAccessor.Layout" /> instance.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Dockablz.LayoutAccessor.BranchAccessor">
            <summary>
            <see cref="P:One.Control.Controls.Dragablz.Dockablz.LayoutAccessor.BranchAccessor" /> and <see cref="P:One.Control.Controls.Dragablz.Dockablz.LayoutAccessor.TabablzControl" /> are mutually exclusive, according to whether the layout has been split, or just contains a tab control.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Dockablz.LayoutAccessor.TabablzControl">
            <summary>
            <see cref="P:One.Control.Controls.Dragablz.Dockablz.LayoutAccessor.BranchAccessor" /> and <see cref="P:One.Control.Controls.Dragablz.Dockablz.LayoutAccessor.TabablzControl" /> are mutually exclusive, according to whether the layout has been split, or just contains a tab control.
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Dockablz.LayoutAccessor.Visit(System.Action{One.Control.Controls.Dragablz.Dockablz.BranchAccessor},System.Action{One.Control.Controls.Dragablz.TabablzControl},System.Action{System.Object})">
            <summary>
            Visits the content of the layout, according to its content type.  No more than one of the provided <see cref="T:System.Action" />
            callbacks will be called.
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Dockablz.LayoutAccessor.TabablzControls">
            <summary>
            Gets all the Tabablz controls in a Layout, regardless of location.
            </summary>
            <returns></returns>
        </member>
        <member name="T:One.Control.Controls.Dragablz.Dockablz.LocationReport">
            <summary>
            Provides information about where a tab control is withing a layout structure.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Dockablz.LocationReport.ParentBranch">
            <summary>
            Gets the parent branch if this is a leaf. If the <see cref="P:One.Control.Controls.Dragablz.Dockablz.LocationReport.TabablzControl" /> is directly under the <see cref="P:One.Control.Controls.Dragablz.Dockablz.LocationReport.RootLayout" /> will be <c>null</c>.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Dockablz.LocationReport.IsLeaf">
            <summary>
            Idicates if this is a leaf in a branch. <c>True</c> if <see cref="P:One.Control.Controls.Dragablz.Dockablz.LocationReport.ParentBranch" /> is not null.
            </summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.Dockablz.LocationSnapShot">
            <summary>
            Initially needed to restore MDI dragablz items styles after a max then restore,
            as the trigger which binds the item width to the canvas width sets the  Width back to the default
            (e.g double.NaN) when the trigger is unset.  so we need to re-apply sizes manually
            </summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.DragablzColors">
            <summary>
            </summary>
            <remarks>
            In supporting .Net 4.0 we don't have access to SystemParameters.WindowGlassBrush, and even then
            the opacity is not provided, so this class wraps up a few issues around here.
            </remarks>
        </member>
        <member name="F:One.Control.Controls.Dragablz.DragablzItem.ContentRotateTransformAngleProperty">
            <summary>
            Allows item content to be rotated (in suppported templates), typically for use in a vertical/side tab.
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.DragablzItem.SetContentRotateTransformAngle(System.Windows.DependencyObject,System.Double)">
            <summary>
            Allows item content to be rotated (in suppported templates), typically for use in a vertical/side tab.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.DragablzItem.GetContentRotateTransformAngle(System.Windows.DependencyObject)">
            <summary>
            Allows item content to be rotated (in suppported templates), typically for use in a vertical/side tab.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="F:One.Control.Controls.Dragablz.DragablzItem.IsCustomThumbProperty">
            <summary>
            <see cref="T:One.Control.Controls.Dragablz.DragablzItem" /> templates contain a thumb, which is used to drag the item around.
            For most scenarios this is fine, but by setting this flag to <value>true</value> you can define
            a custom thumb in your content, without having to override the template.  This can be useful if you
            have extra content; such as a custom button that you want the user to be able to interact with (as usually
            the default thumb will handle mouse interaction).
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.DragablzItem.SetIsCustomThumb(System.Windows.Controls.Primitives.Thumb,System.Boolean)">
            <summary>
            <see cref="T:One.Control.Controls.Dragablz.DragablzItem" /> templates contain a thumb, which is used to drag the item around.
            For most scenarios this is fine, but by setting this flag to <value>true</value> you can define
            a custom thumb in your content, without having to override the template.  This can be useful if you
            have extra content; such as a custom button that you want the user to be able to interact with (as usually
            the default thumb will handle mouse interaction).
            </summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.DragablzItemsControl">
            <summary>
            Items control which typically uses a canvas and
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.DragablzItemsControl.AddToSource(System.Object,One.Control.Controls.Dragablz.AddLocationHint)">
            <summary>
            Adds an item to the underlying source, displaying in a specific position in rendered control.
            </summary>
            <param name="item"></param>
            <param name="addLocationHint"></param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.DragablzItemsControl.AddToSource(System.Object,System.Object,One.Control.Controls.Dragablz.AddLocationHint)">
            <summary>
            Adds an item to the underlying source, displaying in a specific position in rendered control.
            </summary>
            <param name="item"></param>
            <param name="nearItem"></param>
            <param name="addLocationHint"></param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.DragablzItemsControl.MoveItem(One.Control.Controls.Dragablz.MoveItemRequest)">
            <summary>
            Move an item in the rendered layout.
            </summary>
            <param name="moveItemRequest"></param>
        </member>
        <member name="T:One.Control.Controls.Dragablz.DragablzWindow">
            <summary>
            It is not necessary to use a <see cref="T:One.Control.Controls.Dragablz.DragablzWindow" /> to gain tab dragging features.
            What this Window does is allow a quick way to remove the Window border, and support transparency whilst
            dragging.
            </summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.EmptyHeaderSizingHint">
            <summary>
            Provide a hint for how the header should size itself if there are no tabs left (and a Window is still open).
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.EmptyHeaderSizingHint.Collapse">
            <summary>
            The header size collapses to zero along the correct axis.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.EmptyHeaderSizingHint.PreviousTab">
            <summary>
            The header size remains that of the last tab prior to the tab header becoming empty.
            </summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.HeaderedItemViewModel">
            <summary>
            Helper class to create view models, particularly for tool/MDI windows.
            </summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.IInterLayoutClient">
            <summary>
            Implementors should provide a mechanism to provide a new host control which contains a new <see cref="T:One.Control.Controls.Dragablz.TabablzControl" />.
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.IInterLayoutClient.GetNewHost(System.Object,One.Control.Controls.Dragablz.TabablzControl)">
            <summary>
            Provide a new host control and tab into which will be placed into a newly created layout branch.
            </summary>
            <param name="partition">Provides the partition where the drag operation was initiated.</param>
            <param name="source">The source control where a dragging operation was initiated.</param>
            <returns></returns>
        </member>
        <member name="T:One.Control.Controls.Dragablz.IInterTabClient">
            <summary>
            Implementors should provide mechanisms for providing new windows and closing old windows.
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.IInterTabClient.GetNewHost(One.Control.Controls.Dragablz.IInterTabClient,System.Object,One.Control.Controls.Dragablz.TabablzControl)">
            <summary>
            Provide a new host window so a tab can be teared from an existing window into a new window.
            </summary>
            <param name="interTabClient"></param>
            <param name="partition">Provides the partition where the drag operation was initiated.</param>
            <param name="source">The source control where a dragging operation was initiated.</param>
            <returns></returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.IInterTabClient.TabEmptiedHandler(One.Control.Controls.Dragablz.TabablzControl,System.Windows.Window)">
            <summary>
            Called when a tab has been emptied, and thus typically a window needs closing.
            </summary>
            <param name="tabControl"></param>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="P:One.Control.Controls.Dragablz.InterTabController.Partition">
            <summary>
            The partition allows on or more tab environments in a single application.  Only tabs which have a tab controller
            with a common partition will be allowed to have tabs dragged between them.  <c>null</c> is a valid partition (i.e global).
            </summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.AddLocationHint">
            <summary>
            Specifies where an item should appear when added to tab control, as the headers order do not
            specifically correlate to the order of the the source items.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.AddLocationHint.First">
            <summary>
            Display item in the first position.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.AddLocationHint.Last">
            <summary>
            Display item in the first position.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.AddLocationHint.Prior">
            <summary>
            Display an item prior to the selected, or specified item.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.AddLocationHint.After">
            <summary>
            Display an item after the selected, or specified item.
            </summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.PositionMonitor">
            <summary>
            Consumers can provide a position monitor to receive updates regarding the location of an item.
            </summary>
            <remarks>
            A <see cref="T:One.Control.Controls.Dragablz.PositionMonitor" /> can be used to listen to  changes
            instead of routed events, which can be easier in a MVVM scenario.
            </remarks>
        </member>
        <member name="E:One.Control.Controls.Dragablz.PositionMonitor.LocationChanged">
            <summary>
            Raised when the X,Y coordinate of a <see cref="T:One.Control.Controls.Dragablz.DragablzItem" /> changes.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Referenceless.SerialDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Referenceless.SerialDisposable.Disposable">
            <summary>
            Gets or sets the underlying disposable.
            </summary>

            <remarks>
            If the SerialDisposable has already been disposed, assignment to this property causes immediate disposal of the given disposable object. Assigning this property disposes the previous disposable object.
            </remarks>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Referenceless.SerialDisposable.Dispose">
            <summary>
            Disposes the underlying disposable as well as all future replacements.
            </summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.Savablz.BranchItemState`1">
            <summary>
            The item that is stored in a branch state (first or second)
            </summary>
            <typeparam name="TTabItem">The tab item type</typeparam>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Savablz.BranchItemState`1.#ctor(One.Control.Controls.Dragablz.Savablz.BranchState{`0},One.Control.Controls.Dragablz.Savablz.TabSetState{`0})">
            <summary>
            The generic constructor, used by the Json deserializer
            </summary>
            <param name="itemAsBranch">If this item is a branch, this parameter must contain the branch state (<c>null</c> otherwise)</param>
            <param name="itemAsTabSet">If this item is a tab set, this parameter must contain the tab set state (<c>null</c> otherwise)</param>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Savablz.BranchItemState`1.ItemAsBranch">
            <summary>
            The branch, if this item is a branch, <c>null</c> otherwise
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Savablz.BranchItemState`1.ItemAsTabSet">
            <summary>
            The tab set, if this item is a tab set, <c>null</c> otherwise
            </summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.Savablz.BranchState`1">
            <summary> The state of a layout branching </summary>
            <typeparam name="TTabModel"> The type of the tab content model </typeparam>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Savablz.BranchState`1.#ctor(One.Control.Controls.Dragablz.Savablz.BranchItemState{`0},One.Control.Controls.Dragablz.Savablz.BranchItemState{`0},System.Windows.Controls.Orientation,System.Double)">
            <summary> The constructor </summary>
            <param name="firstChild">  The first child </param>
            <param name="secondChild"> The second child </param>
            <param name="orientation"> The split orientation </param>
            <param name="ratio">       The split ratio </param>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Savablz.BranchState`1.FirstChild">
            <summary> The first branch </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Savablz.BranchState`1.SecondChild">
            <summary> The second branch </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Savablz.BranchState`1.Orientation">
            <summary> The split orientation </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Savablz.BranchState`1.Ratio">
            <summary> The split ratio </summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.Savablz.LayoutWindowState`1">
            <summary>
            Represents the state of a window
            </summary>
            <typeparam name="TTabModel">The type of the tab content model</typeparam>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Savablz.LayoutWindowState`1.#ctor(System.Double,System.Double,System.Double,System.Double,System.Windows.WindowState,One.Control.Controls.Dragablz.Savablz.BranchItemState{`0})">
            <summary>
            The constructor
            </summary>
            <param name="x">The X position of the window</param>
            <param name="y">The Y position of the window</param>
            <param name="width">The window width</param>
            <param name="height">The window height</param>
            <param name="windowState">The window state</param>
            <param name="child">The root of this layout</param>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Savablz.LayoutWindowState`1.X">
            <summary>
            The window's X position
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Savablz.LayoutWindowState`1.Y">
            <summary>
            The window's Y position
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Savablz.LayoutWindowState`1.Width">
            <summary>
            The window's width
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Savablz.LayoutWindowState`1.Height">
            <summary>
            The window's height
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Savablz.LayoutWindowState`1.WindowState">
            <summary>
            The window state (maximized, restored, minimize)
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Savablz.LayoutWindowState`1.Child">
            <summary>
            The root of this layout
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Savablz.TabSetState`1.#ctor(System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            The constructor
            </summary>
            <param name="selectedTabItemIndex">The index of the tab item that is currently selected in the TabSet</param>
            <param name="tabItems">The tab items</param>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Savablz.TabSetState`1.SelectedTabItemIndex">
            <summary>
            The tab item that is currently selected in the TabSet
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Savablz.TabSetState`1.TabItems">
            <summary>
            The tab items
            </summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.Savablz.WindowsStateSaver">
            <summary>
            Saves/restore the state of the windows
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Savablz.WindowsStateSaver.GetWindowsState``2(System.Func{``1,``0})">
            <summary>
            Gets the state of all windows in the app
            </summary>
            <typeparam name="TTabModel">The type of tab model</typeparam>
            <typeparam name="TTabViewModel">The type of tab view model, currently displayed in the app.</typeparam>
            <param name="tabContentModelConverter">The converter that transforms tab view models to models</param>
            <returns>The state of all windows</returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Savablz.WindowsStateSaver.GetLayoutState``2(One.Control.Controls.Dragablz.Dockablz.Layout,System.Func{``1,``0})">
            <summary>
            Gets the state of a single window
            </summary>
            <typeparam name="TTabModel">The type of tab model</typeparam>
            <typeparam name="TTabViewModel">The type of tab view model, currently displayed in the app.</typeparam>
            <param name="layout">The layout to be inspected</param>
            <param name="tabContentModelConverter">The converter that transforms tab view models to models</param>
            <returns>The state of the specified window</returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Savablz.WindowsStateSaver.GetBranchState``2(One.Control.Controls.Dragablz.Dockablz.BranchAccessor,System.Func{``1,``0})">
            <summary>
            Gets the state of a branch
            </summary>
            <typeparam name="TTabModel">The type of tab model</typeparam>
            <typeparam name="TTabViewModel">The type of tab view model, currently displayed in the app.</typeparam>
            <param name="branchVisitor">The branch to be inspected</param>
            <param name="tabContentModelConverter">The converter that transforms tab view models to models</param>
            <returns>The read state of the branch</returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Savablz.WindowsStateSaver.GetTabSetState``2(One.Control.Controls.Dragablz.TabablzControl,System.Func{``1,``0})">
            <summary>
            Gets the state of a TabablzControl so that it can be serialized
            </summary>
            <typeparam name="TTabModel">The type of tab model</typeparam>
            <typeparam name="TTabViewModel">The type of tab view model, currently displayed in the app.</typeparam>
            <param name="tabablzControl">The control to be </param>
            <param name="tabContentModelConverter">The converter that transforms tab view models to models</param>
            <returns>The state of the tab set</returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Savablz.WindowsStateSaver.RestoreWindowsState``2(One.Control.Controls.Dragablz.TabablzControl,One.Control.Controls.Dragablz.Savablz.LayoutWindowState{``0}[],System.Func{``0,``1})">
            <summary>
            Restors the state of all windows
            </summary>
            <typeparam name="TTabModel">The type of tab model</typeparam>
            <typeparam name="TTabViewModel">The type of tab view model to be displayed in the app.</typeparam>
            <param name="windowInitialTabablzControl">The initial tabablz control that will be used for restore</param>
            <param name="layoutWindowsState">The state of the windows</param>
            <param name="viewModelFactory">The function that creates the view model based on a model</param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Savablz.WindowsStateSaver.RestoreTabSetState``2(One.Control.Controls.Dragablz.TabablzControl,One.Control.Controls.Dragablz.Savablz.TabSetState{``0},System.Func{``0,``1})">
            <summary>
            Restores the state of the tabSet
            </summary>
            <typeparam name="TTabModel">The type of tab model</typeparam>
            <typeparam name="TTabViewModel">The type of tab view model to be displayed in the app.</typeparam>
            <param name="tabablzControl">The control in which to restore the items</param>
            <param name="tabSetState">The state of the tab set to be restored</param>
            <param name="viewModelFactory">The function that creates the view model based on a model</param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Savablz.WindowsStateSaver.RestoreBranchState``2(One.Control.Controls.Dragablz.TabablzControl,One.Control.Controls.Dragablz.Savablz.BranchState{``0},System.Func{``0,``1})">
            <summary>
            Restores the state of the branch
            </summary>
            <typeparam name="TTabModel">The type of tab model</typeparam>
            <typeparam name="TTabViewModel">The type of tab view model to be displayed in the app.</typeparam>
            <param name="tabablzControl">The control in which to restore the items</param>
            <param name="branchState">The state of the branch to be restored</param>
            <param name="viewModelFactory">The function that creates the view model based on a model</param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Savablz.WindowsStateSaver.RestoreBranchItemState``2(One.Control.Controls.Dragablz.TabablzControl,One.Control.Controls.Dragablz.Savablz.BranchItemState{``0},System.Func{``0,``1})">
            <summary>
            Restores the state of a branch item
            </summary>
            <typeparam name="TTabModel">The type of tab model</typeparam>
            <typeparam name="TTabViewModel">The type of tab view model to be displayed in the app.</typeparam>
            <param name="tabablzControl">The control in which to restore the items</param>
            <param name="branchItemState">The state of the branch item to be restored</param>
            <param name="viewModelFactory">The function that creates the view model based on a model</param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Savablz.WindowsStateSaver.CopyTabablzControl(One.Control.Controls.Dragablz.TabablzControl)">
            <summary>
            Creates a new TabablzControl based on the specified control
            </summary>
            <param name="tabablzControl">The control to copy</param>
            <returns>The created control</returns>
        </member>
        <member name="T:One.Control.Controls.Dragablz.StackPositionMonitor">
            <summary>
            A linear position monitor simplifies the montoring of the order of items, where they are laid out
            horizontally or vertically (typically via a <see cref="T:One.Control.Controls.Dragablz.StackOrganiser" />.
            </summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.TabablzControl">
            <summary>
            Extended tab control which supports tab repositioning, and drag and drop.  Also
            uses the common WPF technique for pesisting the visual tree across tabs.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabablzControl.HeaderItemsControlPartName">
            <summary>
            Template part.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabablzControl.ItemsHolderPartName">
            <summary>
            Template part.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabablzControl.CloseItemCommand">
            <summary>
            Routed command which can be used to close a tab.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabablzControl.AddItemCommand">
            <summary>
            Routed command which can be used to add a new tab.  See <see cref="P:One.Control.Controls.Dragablz.TabablzControl.NewItemFactory" />.
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.GetLoadedInstances">
            <summary>
            Helper method which returns all the currently loaded instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.CloseItem(System.Object)">
            <summary>
            Helper method to close all tabs where the item is the tab's content (helpful with MVVM scenarios)
            </summary>
            <remarks>
            In MVVM scenarios where you don't want to bind the routed command to your ViewModel,
            with this helper method and embedding the TabablzControl in a UserControl, you can keep
            the View-specific dependencies out of the ViewModel.
            </remarks>
            <param name="tabContentItem">An existing Tab item content (a ViewModel in MVVM scenarios) which is backing a tab control</param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.AddItem(System.Object,System.Object,One.Control.Controls.Dragablz.AddLocationHint)">
            <summary>
            Helper method to add an item next to an existing item.
            </summary>
            <remarks>
            Due to the organisable nature of the control, the order of items may not reflect the order in the source collection.  This method
            will add items to the source collection, managing their initial appearance on screen at the same time.
            If you are using a <see cref="P:One.Control.Controls.Dragablz.InterTabController.InterTabClient" /> this will be used to add the item into the source collection.
            </remarks>
            <param name="item">New item to add.</param>
            <param name="nearItem">Existing object/tab item content which defines which tab control should be used to add the object.</param>
            <param name="addLocationHint">Location, relative to the <paramref name="nearItem" /> object</param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.SelectItem(System.Object)">
            <summary>
            Finds and selects an item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:One.Control.Controls.Dragablz.TabablzControl.CustomHeaderItemStyle">
            <summary>
            Style to apply to header items which are not their own item container (<see cref="T:System.Windows.Controls.TabItem" />).  Typically items bound via the <see cref="!:ItemsSource" /> will use this style.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.TabablzControl.ShowDefaultCloseButton">
            <summary>
            Indicates whether a default close button should be displayed.  If manually templating the tab header content the close command
            can be called by executing the <see cref="F:One.Control.Controls.Dragablz.TabablzControl.CloseItemCommand" /> command (typically via a <see cref="T:System.Windows.Controls.Button" />).
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.TabablzControl.ShowDefaultAddButton">
            <summary>
            Indicates whether a default add button should be displayed.  Alternately an add button
            could be added in <see cref="P:One.Control.Controls.Dragablz.TabablzControl.HeaderPrefixContent" /> or <see cref="P:One.Control.Controls.Dragablz.TabablzControl.HeaderSuffixContent" />, utilising
            <see cref="F:One.Control.Controls.Dragablz.TabablzControl.AddItemCommand" />.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.TabablzControl.IsHeaderPanelVisible">
            <summary>
            Indicates wither the heaeder panel is visible.  Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.TabablzControl.AddLocationHint">
            <summary>
            Gets or sets the location to add new tab items in the header.
            </summary>
            <remarks>
            The logical order of the header items might not add match the content of the source items,
            so this property allows control of where new items should appear.
            </remarks>
        </member>
        <member name="P:One.Control.Controls.Dragablz.TabablzControl.FixedHeaderCount">
            <summary>
            Allows a the first adjacent tabs to be fixed (no dragging, and default close button will not show).
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.TabablzControl.InterTabController">
            <summary>
            An <see cref="P:One.Control.Controls.Dragablz.TabablzControl.InterTabController" /> must be provided to enable tab tearing. Behaviour customisations can be applied
            vie the controller.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabablzControl.NewItemFactoryProperty">
            <summary>
            Allows a factory to be provided for generating new items. Typically used in conjunction with <see cref="F:One.Control.Controls.Dragablz.TabablzControl.AddItemCommand" />.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.TabablzControl.NewItemFactory">
            <summary>
            Allows a factory to be provided for generating new items. Typically used in conjunction with <see cref="F:One.Control.Controls.Dragablz.TabablzControl.AddItemCommand" />.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabablzControl.IsEmptyProperty">
            <summary>
            Indicates if there are no current tab items.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.TabablzControl.IsEmpty">
            <summary>
            Indicates if there are no current tab items.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabablzControl.IsEmptyChangedEvent">
            <summary>
            Raised when <see cref="P:One.Control.Controls.Dragablz.TabablzControl.IsEmpty" /> changes.
            </summary>
        </member>
        <member name="E:One.Control.Controls.Dragablz.TabablzControl.IsEmptyChanged">
            <summary>
            Event handler to list to <see cref="F:One.Control.Controls.Dragablz.TabablzControl.IsEmptyChangedEvent" />.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabablzControl.ClosingItemCallbackProperty">
            <summary>
            Optionally allows a close item hook to be bound in.  If this propety is provided, the func must return true for the close to continue.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.TabablzControl.ClosingItemCallback">
            <summary>
            Optionally allows a close item hook to be bound in.  If this propety is provided, the func must return true for the close to continue.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabablzControl.ConsolidateOrphanedItemsProperty">
            <summary>
            Set to <c>true</c> to have tabs automatically be moved to another tab is a window is closed, so that they arent lost.
            Can be useful for fixed/persistant tabs that may have been dragged into another Window.  You can further control
            this behaviour on a per tab item basis by providing <see cref="P:One.Control.Controls.Dragablz.TabablzControl.ConsolidatingOrphanedItemCallback" />.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.TabablzControl.ConsolidateOrphanedItems">
            <summary>
            Set to <c>true</c> to have tabs automatically be moved to another tab is a window is closed, so that they arent lost.
            Can be useful for fixed/persistant tabs that may have been dragged into another Window.  You can further control
            this behaviour on a per tab item basis by providing <see cref="P:One.Control.Controls.Dragablz.TabablzControl.ConsolidatingOrphanedItemCallback" />.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabablzControl.ConsolidatingOrphanedItemCallbackProperty">
            <summary>
            Assuming <see cref="P:One.Control.Controls.Dragablz.TabablzControl.ConsolidateOrphanedItems" /> is set to <c>true</c>, consolidation of individual
            tab items can be cancelled by providing this call back and cancelling the <see cref="T:One.Control.Controls.Dragablz.ItemActionCallbackArgs`1" />
            instance.
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.TabablzControl.ConsolidatingOrphanedItemCallback">
            <summary>
            Assuming <see cref="P:One.Control.Controls.Dragablz.TabablzControl.ConsolidateOrphanedItems" /> is set to <c>true</c>, consolidation of individual
            tab items can be cancelled by providing this call back and cancelling the <see cref="T:One.Control.Controls.Dragablz.ItemActionCallbackArgs`1" />
            instance.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabablzControl.IsDraggingWindowProperty">
            <summary>
            Readonly dependency property which indicates whether the owning <see cref="T:System.Windows.Window" />
            is currently dragged
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.TabablzControl.IsDraggingWindow">
            <summary>
            Readonly dependency property which indicates whether the owning <see cref="T:System.Windows.Window" />
            is currently dragged
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabablzControl.IsDraggingWindowChangedEvent">
            <summary>
            Event indicating <see cref="P:One.Control.Controls.Dragablz.TabablzControl.IsDraggingWindow" /> has changed.
            </summary>
        </member>
        <member name="E:One.Control.Controls.Dragablz.TabablzControl.IsDraggingWindowChanged">
            <summary>
            Event indicating <see cref="P:One.Control.Controls.Dragablz.TabablzControl.IsDraggingWindow" /> has changed.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabablzControl.IsClosingAsPartOfDragOperationProperty">
            <summary>
            Temporarily set by the framework if a users drag opration causes a Window to close (e.g if a tab is dragging into another tab).
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.GetIsClosingAsPartOfDragOperation(System.Windows.Window)">
            <summary>
            Helper method which can tell you if a <see cref="T:System.Windows.Window" /> is being automatically closed due
            to a user instigated drag operation (typically when a single tab is dropped into another window.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabablzControl.EmptyHeaderSizingHintProperty">
            <summary>
            Provide a hint for how the header should size itself if there are no tabs left (and a Window is still open).
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.TabablzControl.EmptyHeaderSizingHint">
            <summary>
            Provide a hint for how the header should size itself if there are no tabs left (and a Window is still open).
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.AddToSource(System.Object)">
            <summary>
            Adds an item to the source collection.  If the InterTabController.InterTabClient is set that instance will be deferred to.
            Otherwise an attempt will be made to add to the <see cref="!:ItemsSource" /> property, and lastly <see cref="!:Items" />.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.RemoveFromSource(System.Object)">
            <summary>
            Removes an item from the source collection.  If the InterTabController.InterTabClient is set that instance will be deferred to.
            Otherwise an attempt will be made to remove from the <see cref="!:ItemsSource" /> property, and lastly <see cref="!:Items" />.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.GetOrderedHeaders">
            <summary>
            Gets the header items, ordered according to their current visual position in the tab header.
            </summary>
            <returns></returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.OnApplyTemplate">
            <summary>
            Called when <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" /> is called.
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            update the visible child in the ItemsHolder
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            when the items change we remove any generated panel children and add any new ones as necessary
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides class handling for the <see cref="E:System.Windows.ContentElement.KeyDown" /> routed event that occurs when the user presses a key.
            </summary>
            <param name="e">Provides data for <see cref="T:System.Windows.Input.KeyEventArgs" />.</param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.OnCreateAutomationPeer">
            <summary>
            Provides an appropriate automation peer implementation for this control
            as part of the WPF automation infrastructure.
            </summary>
            <returns>The type-specific System.Windows.Automation.Peers.AutomationPeer implementation.</returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.UpdateSelectedItem">
            <summary>
            generate a ContentPresenter for the selected item
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.CreateChildContentPresenter(System.Object)">
            <summary>
            create the child ContentPresenter for the given item (could be data or a TabItem)
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzControl.FindChildContentPresenter(System.Object)">
            <summary>
            Find the CP for the given object.  data could be a TabItem or a piece of data
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:One.Control.Controls.Dragablz.TabablzHeaderSizeConverter">
            <summary>
            Provides a little help for sizing the header panel in the tab control
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.TabablzHeaderSizeConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            The first value should be the total size available size, typically the parent control size.
            The second value should be from <see cref="F:One.Control.Controls.Dragablz.DragablzItemsControl.ItemsPresenterWidthProperty" /> or (height equivalent)
            All additional values should be siblings sizes (width or height) which will affect (reduce) the available size.
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:One.Control.Controls.Dragablz.TabablzItemStyleSelector">
            <summary>
            Selects style to apply to a <see cref="T:One.Control.Controls.Dragablz.DragablzItem" /> according to the tab item content itself.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabEmptiedResponse.CloseWindowOrLayoutBranch">
            <summary>
            Allow the Window to be closed automatically.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.TabEmptiedResponse.DoNothing">
            <summary>
            The window will not be closed by the <see cref="T:One.Control.Controls.Dragablz.TabablzControl" />, probably meaning the implementor will close the window manually
            </summary>
        </member>
        <member name="T:One.Control.Controls.Dragablz.Themes.MaterialDesignAssist">
            <summary>
            Helper propries for configuring the material design style.
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.Themes.MaterialDesignAssist.IndicatorBrushProperty">
            <summary>
            Framework use only.
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Themes.MaterialDesignAssist.SetIndicatorBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            The indicator (underline) brush.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Themes.MaterialDesignAssist.GetIndicatorBrush(System.Windows.DependencyObject)">
            <summary>
            The indicator (underline) brush.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="F:One.Control.Controls.Dragablz.Themes.Ripple.RecognizesAccessKeyProperty">
            <summary>
              The DependencyProperty for the RecognizesAccessKey property.
              Default Value: false
            </summary>
        </member>
        <member name="P:One.Control.Controls.Dragablz.Themes.Ripple.RecognizesAccessKey">
            <summary>
              Determine if Ripple should use AccessText in its style
            </summary>
        </member>
        <member name="F:One.Control.Controls.Dragablz.Themes.RippleAssist.IsCenteredProperty">
            <summary>
            Set to <c>true</c> to cause the ripple to originate from the centre of the
            content.  Otherwise the effect will originate from the mouse down position.
            </summary>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Themes.RippleAssist.SetIsCentered(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Set to <c>true</c> to cause the ripple to originate from the centre of the
            content.  Otherwise the effect will originate from the mouse down position.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:One.Control.Controls.Dragablz.Themes.RippleAssist.GetIsCentered(System.Windows.DependencyObject)">
            <summary>
            Set to <c>true</c> to cause the ripple to originate from the centre of the
            content.  Otherwise the effect will originate from the mouse down position.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:One.Control.Converters.ShowDefaultCloseButtonConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            [0] is owning tabcontrol ShowDefaultCloseButton value.
            [1] is owning tabcontrol FixedHeaderCount value.
            [2] is item LogicalIndex
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:One.Control.Converters.BoolToVisibilityConverter">
            <summary>
            true 显示
            </summary>
        </member>
        <member name="T:One.Control.Converters.BoolToVisibilityConverterInverse">
            <summary>
            true 折叠
            </summary>
        </member>
        <member name="T:One.Control.Converters.NullToVisibilityConverter">
            <summary>
            Null则不显示
            </summary>
        </member>
        <member name="T:One.Control.Converters.IntToVisibilityConverter">
            <summary>
            0-折叠,其他显示
            </summary>
        </member>
        <member name="T:One.Control.ExtentionMethods.ItemControlExtentionMethods">
            <summary>
            滚动扩展方法
            </summary>
        </member>
        <member name="F:One.Control.ExtentionMethods.ItemControlExtentionMethods.HorizontalOffsetProperty">
            <summary> 动画属性，控制水平方向移动 </summary>
        </member>
        <member name="T:One.Control.ExtentionMethods.MultiStyleExtension">
            <summary> 实现一个标记扩展，该标记扩展支持根据 XAML 制作的多个静态（XAML 加载时） <see cref="T:System.Windows.Style" /> 资源引用。 </summary>
        </member>
        <member name="M:One.Control.ExtentionMethods.MultiStyleExtension.#ctor">
            <summary> 构造方法。 </summary>
        </member>
        <member name="M:One.Control.ExtentionMethods.MultiStyleExtension.#ctor(System.String)">
            <summary> 构造方法。 </summary>
            <param name="resourceKeys"> 多个 <see cref="T:System.Windows.Style" /> 资源字典多个 Key </param>
        </member>
        <member name="M:One.Control.ExtentionMethods.MultiStyleExtension.ProvideValue(System.IServiceProvider)">
            <summary> 返回一个应在此扩展应用的属性上设置的对象。对于 <see cref="!:WpfMultiStyle.MultiStyleExtension" />，这是在资源字典中查找的多个 <see cref="T:System.Windows.Style" /> 对象，并合并这些对象，其中要查找的对象由 <see cref="P:System.Windows.StaticResourceExtension.ResourceKey" /> 标识。 </summary>
            <param name="serviceProvider"> 可以为标记扩展提供服务的对象。 </param>
            <returns> 要在计算标记扩展提供的值的属性上设置的对象值。 </returns>
        </member>
        <member name="T:One.Control.ExtentionMethods.StyleExtensions">
            <summary>
            一些扩展方法。
            </summary>
        </member>
        <member name="M:One.Control.ExtentionMethods.StyleExtensions.Merge(System.Windows.Style,System.Windows.Style)">
            <summary>
            合并指定的 <see cref="T:System.Windows.Style" />。
            </summary>
            <param name="style1"></param>
            <param name="style2"></param>
        </member>
        <member name="M:One.Control.ExtentionMethods.StyleExtensions.HasValue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            集合是否有值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:One.Control.Helper.ImageHelper.FindImage(System.String,System.String)">
            <summary>
            Assembly: PresentationCore.dll
            </summary>
            <param name="imageName"></param>
            <returns></returns>
        </member>
        <member name="T:One.Control.Helper.MessageHelper">
            <summary>
            带颜色的消息帮助事件
            </summary>
        </member>
        <member name="M:One.Control.Helper.MessageHelper.Notify(System.String,System.Windows.Media.SolidColorBrush)">
            <summary>
            使用方法 Mes.NotifyMessage += SetNotifyMessage;  SetNotifyMessage(string message, SolidColorBrush fc)
            </summary>
            <param name="message"></param>
            <param name="color"></param>
        </member>
        <member name="T:One.Control.Helper.MyVisualTreeHelper">
             <summary>
            关于WPF界面交互的帮助类
             </summary>
        </member>
        <member name="M:One.Control.Helper.MyVisualTreeHelper.FindVisualParent``1(System.Windows.DependencyObject)">
            <summary>查找可视化树的父元素,包括本级元素</summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:One.Control.Helper.MyVisualTreeHelper.FindVisualParent2``1(System.Windows.DependencyObject)">
            <summary>查找可视化树的父元素,不包括本级元素</summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:One.Control.Helper.MyVisualTreeHelper.FindVisualChild``1(System.Windows.DependencyObject)">
            <summary>
            查找可视化树的子元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:One.Control.Helper.Win32Helper.GetCursorPos(One.Control.Helper.Win32Helper.POINT@)">
            <summary>
             该函数检取光标的位置，以屏幕坐标表示。
             <para>光标的位置通常以屏幕坐标的形式给出，它并不受包含该光标的窗口的映射模式的影响。</para>
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:One.Control.OtherLibs.Telerik.EventBinding">
            <summary>
            Represents a binding between an event and a command. The command is potentially a <see cref="T:System.Windows.Input.RoutedCommand" />.
            </summary>
        </member>
        <member name="F:One.Control.OtherLibs.Telerik.EventBinding.CommandParameterProperty">
            <summary>
            Identifies the CommandParameter dependency property.
            </summary>
        </member>
        <member name="F:One.Control.OtherLibs.Telerik.EventBinding.CommandProperty">
            <summary>
            Identifies the Command dependency property.
            </summary>
        </member>
        <member name="F:One.Control.OtherLibs.Telerik.EventBinding.CommandTargetProperty">
            <summary>
            Identifies the CommandTarget dependency property.
            </summary>
        </member>
        <member name="F:One.Control.OtherLibs.Telerik.EventBinding.RaiseOnHandledEventsProperty">
            <summary>
            Identifies the RaiseOnHandledEvents dependency property.
            </summary>
        </member>
        <member name="F:One.Control.OtherLibs.Telerik.EventBinding.EventNameProperty">
            <summary>
            Identifies the EventName dependency property.
            </summary>
        </member>
        <member name="F:One.Control.OtherLibs.Telerik.EventBinding.PassEventArgsToCommandProperty">
            <summary>
            Identifies the PassEventArgsToCommand property.
            </summary>
        </member>
        <member name="P:One.Control.OtherLibs.Telerik.EventBinding.EventName">
            <summary>
            Gets or sets the name of the event that will open the context menu.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="P:One.Control.OtherLibs.Telerik.EventBinding.RaiseOnHandledEvents">
            <summary>
            Gets or sets whether <see cref="T:One.Control.OtherLibs.Telerik.EventBinding" /> will raise the <see cref="P:One.Control.OtherLibs.Telerik.EventBinding.Command" /> on handled routed events.
            The default value is false. This is a dependency property.
            </summary>
        </member>
        <member name="P:One.Control.OtherLibs.Telerik.EventBinding.Command">
            <summary>
             Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this input binding.
            </summary>
        </member>
        <member name="P:One.Control.OtherLibs.Telerik.EventBinding.CommandParameter">
            <summary>
            Gets or sets the command-specific data for a particular command.
            </summary>
        </member>
        <member name="P:One.Control.OtherLibs.Telerik.EventBinding.CommandTarget">
            <summary>
            Gets or sets the target element of the command.
            </summary>
        </member>
        <member name="P:One.Control.OtherLibs.Telerik.EventBinding.PassEventArgsToCommand">
            <summary>
            Gets or sets the value indicating if the event arguments will be passed to the command. If you specify
            CommandParameter this value is ignored.
            </summary>
        </member>
        <member name="M:One.Control.OtherLibs.Telerik.EventBinding.CreateInstanceCore">
            <summary>
            Creates an instance of an <see cref="T:One.Control.OtherLibs.Telerik.EventBinding" />.
            </summary>
            <returns>A new instance of an <see cref="T:One.Control.OtherLibs.Telerik.EventBinding" />.</returns>
        </member>
        <member name="M:One.Control.OtherLibs.Telerik.EventBindingCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:One.Control.OtherLibs.Telerik.EventBindingCollection" /> class.
            </summary>
        </member>
        <member name="M:One.Control.OtherLibs.Telerik.EventBindingCollection.CreateInstanceCore">
            <summary>
            Creates new instance of <see cref="T:One.Control.OtherLibs.Telerik.EventBindingCollection" />.
            </summary>
            <returns>New instance of <see cref="T:One.Control.OtherLibs.Telerik.EventBindingCollection" />.</returns>
        </member>
        <member name="T:One.Control.OtherLibs.Telerik.EventToCommandBehavior">
            <summary>
            Behavior that execute command when given event is raised.
            </summary>
        </member>
        <member name="M:One.Control.OtherLibs.Telerik.EventToCommandBehavior.GetEventBindings(System.Windows.DependencyObject)">
            <summary>
            Gets the collection of <see cref="T:One.Control.OtherLibs.Telerik.EventBinding" />s associated with this element.
            </summary>
            <param name="obj">The object that <see cref="T:One.Control.OtherLibs.Telerik.EventBindingCollection" /> is returned.</param>
            <returns>Returns the <see cref="T:One.Control.OtherLibs.Telerik.EventBindingCollection" /> associated with this object.</returns>
        </member>
        <member name="T:One.Control.OtherLibs.Telerik.RadRoutedEventHandler">
            <summary>
            Represents the delegate for handlers that receive routed events.
            </summary>
        </member>
        <member name="T:One.Control.OtherLibs.Telerik.RadRoutedEventArgs">
            <summary>
            Contains state information and event data associated with a routed event.
            </summary>
        </member>
        <member name="M:One.Control.OtherLibs.Telerik.RadRoutedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the RadRoutedEventArgs class.
            </summary>
        </member>
        <member name="M:One.Control.OtherLibs.Telerik.RadRoutedEventArgs.#ctor(System.Windows.RoutedEvent)">
            <summary>
            Initializes a new instance of the RadRoutedEventArgs class,
            using the supplied routed event identifier.
            </summary>
            <param name="routedEvent">
            The routed event identifier for this instance of the RoutedEventArgs class.
            </param>
        </member>
        <member name="M:One.Control.OtherLibs.Telerik.RadRoutedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object)">
            <summary>
            Initializes a new instance of the RadRoutedEventArgs class, using
            the supplied routed event identifier, and providing the opportunity
            to declare a different source for the event.
            </summary>
            <param name="routedEvent">
            The routed event identifier for this instance of the RoutedEventArgs class.
            </param>
            <param name="source">
            An alternate source that will be reported when the event is handled.
            This pre-populates the Source property.
            </param>
        </member>
        <member name="M:One.Control.OtherLibs.Telerik.RadRoutedEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the RadRoutedEventArgs class, using
            the supplied routed event identifier, and providing the opportunity
            to declare a different source for the event.
            </summary>
            <param name="source">
            An alternate source that will be reported when the event is handled.
            This pre-populates the Source property.
            </param>
        </member>
        <member name="T:One.Controls.Controls.MessageBox.PopUpMessageBox">
            <summary> TextMessageBox.xaml 的交互逻辑 </summary>
            <summary>
            PopUpMessageBox
            </summary>
        </member>
        <member name="M:One.Controls.Controls.MessageBox.PopUpMessageBox.#ctor">
            <summary> 禁止在外部实例化 </summary>
        </member>
        <member name="P:One.Controls.Controls.MessageBox.PopUpMessageBox.Title">
            <summary> 标题 </summary>
        </member>
        <member name="M:One.Controls.Controls.MessageBox.PopUpMessageBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:One.Controls.Controls.MessageList.MessageShowed">
            <summary> 显示消息类 </summary>
        </member>
        <member name="T:One.Controls.Controls.MessageList.CtrlMessageList">
            <summary> MessageList.xaml 的交互逻辑 </summary>
            <summary>
            CtrlMessageList
            </summary>
        </member>
        <member name="M:One.Controls.Controls.MessageList.CtrlMessageList.SetLogConfigPath(System.String)">
            <summary> 设置Nlog的配置文件路径 </summary>
            <param name="path">  </param>
        </member>
        <member name="M:One.Controls.Controls.MessageList.CtrlMessageList.SetNotifyMessage(System.String,System.Windows.Media.SolidColorBrush)">
            <summary> 显示用 </summary>
            <param name="message"> 显示的 </param>
            <param name="fc">      前景色 </param>
        </member>
        <member name="M:One.Controls.Controls.MessageList.CtrlMessageList.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:One.Controls.Controls.MessageList.ConverterWidth">
            <summary>宽度减少10</summary>
        </member>
        <member name="F:EsspClassLibrary.MyNet.Client.ReceiveBuf">
            <summary> 原始字节数据 </summary>
        </member>
        <member name="F:EsspClassLibrary.MyNet.Client.DataSend">
            <summary> 发送数据存储区 </summary>
        </member>
        <member name="M:EsspClassLibrary.MyNet.Client.InitAsClient(System.String,System.Int32)">
            <summary> 初始化作为客户端并连接 </summary>
            <param name="ip">    </param>
            <param name="port">  </param>
        </member>
        <member name="M:EsspClassLibrary.MyNet.Client.InitAsClient(System.Net.IPAddress,System.Int32)">
            <summary> 初始化作为客户端并连接 </summary>
            <param name="ip">    </param>
            <param name="port">  </param>
        </member>
        <member name="M:EsspClassLibrary.MyNet.Client.UnInitAsClient">
            <summary> 断开当前客户端连接 </summary>
            <returns>  </returns>
        </member>
        <member name="M:EsspClassLibrary.MyNet.Client.ConnectCallback(System.IAsyncResult)">
            <summary> 连接服务器回调函数 </summary>
            <param name="ar">  </param>
        </member>
        <member name="F:EsspClassLibrary.MyNet.ClientOriginal.ReceiveBuf">
            <summary>
            原始字节数据
            </summary>
        </member>
        <member name="F:EsspClassLibrary.MyNet.ClientOriginal.DataReceived">
            <summary>接收数据存储区</summary>
        </member>
        <member name="F:EsspClassLibrary.MyNet.ClientOriginal.DataSend">
            <summary>发送数据存储区</summary>
        </member>
        <member name="M:EsspClassLibrary.MyNet.ClientOriginal.InitAsClient(System.String,System.Int32)">
            <summary>初始化作为客户端并连接</summary>
            <param name="ip">  </param>
            <param name="port"></param>
        </member>
        <member name="M:EsspClassLibrary.MyNet.ClientOriginal.InitAsClient(System.Net.IPAddress,System.Int32)">
            <summary>初始化作为客户端并连接</summary>
            <param name="ip">  </param>
            <param name="port"></param>
        </member>
        <member name="M:EsspClassLibrary.MyNet.ClientOriginal.UnInitAsClient">
            <summary>断开当前客户端连接</summary>
            <returns></returns>
        </member>
        <member name="M:EsspClassLibrary.MyNet.ClientOriginal.ConnectCallback(System.IAsyncResult)">
            <summary>连接服务器回调函数</summary>
            <param name="ar"></param>
        </member>
        <member name="M:EsspClassLibrary.MyNet.ClientOriginal.ReceiveCallback(System.IAsyncResult)">
            <summary>接收数据回调函数</summary>
            <param name="ar"></param>
        </member>
        <member name="M:EsspClassLibrary.MyNet.ClientOriginal.ReceiveAndSend(System.String)">
            <summary>需要在外部重写对消息格式 最后需要加上SendData(string data)</summary>
            <param name="mes"></param>
        </member>
        <member name="F:EsspClassLibrary.MyNet.Server.sckServer">
            <summary>服务器套接字</summary>
        </member>
        <member name="F:EsspClassLibrary.MyNet.Server.ReceiveBuf">
            <summary>接收缓冲区</summary>
        </member>
        <member name="F:EsspClassLibrary.MyNet.Server.SendBuf">
            <summary>发送缓冲区</summary>
        </member>
        <member name="F:EsspClassLibrary.MyNet.Server.DataReceived">
            <summary>接收数据存储区</summary>
        </member>
        <member name="M:EsspClassLibrary.MyNet.Server.InitAsServer(System.String,System.Int32)">
            <summary>初始化作为服务器并启动</summary>
            <param name="ip">  </param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:EsspClassLibrary.MyNet.Server.ConnectedCallback(System.IAsyncResult)">
            <summary>接受连接请求回调函数—— 连接完成后执行</summary>
            <param name="ar"></param>
        </member>
        <member name="M:EsspClassLibrary.MyNet.Server.ServeReceivedCallback(System.IAsyncResult)">
            <summary>接收数据回调函数—— 接收完显示用</summary>
            <param name="ar"></param>
        </member>
        <member name="M:EsspClassLibrary.MyNet.Server.SendData(System.String)">
            <summary>发送数据</summary>
            <param name="data"></param>
        </member>
        <member name="M:EsspClassLibrary.MyNet.Server.SendCallback(System.IAsyncResult)">
            <summary>发送数据回调函数</summary>
            <param name="ar"></param>
        </member>
        <member name="M:EsspClassLibrary.MyNet.Server.ReceiveAndSend(System.String)">
            <summary>需要在外部重写对消息格式 最后需要加上SendData(string data)</summary>
            <param name="mes"></param>
        </member>
    </members>
</doc>